import time
from typing import Optional

from fastapi import FastAPI
from sqlmodel import Field, Session, SQLModel, create_engine, select

# Database configuration
sqlite_file_name = "demo_1_data/demo_1.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"

# Arguments for SQLite database connection to handle multi-threading
connect_args = {"check_same_thread": False}
# Create a new SQLite engine with the specified configurations
engine = create_engine(sqlite_url, echo=True, connect_args=connect_args)

# Initialize FastAPI application
app = FastAPI()


# Model representing a table for storing line calibration_data
class Currnt_readings(SQLModel, table=True):
    # auto-incrementing primary key representing timestamp
    the_timestamp: Optional[float] = Field(default=None, primary_key=True)
    shuntvoltage: float
    busvoltage: float
    loadvoltage: float
    current_uA: float
    power_mW: float


# Function to create the database and tables if they don't exist
def create_db_and_tables():
    SQLModel.metadata.create_all(engine)


# Event hook that runs at the start of the FastAPI application
@app.on_event("startup")
def on_startup():
    create_db_and_tables()


# API endpoint to add a new line record to the database
@app.post("/current/")
def create_line(current: Currnt_readings):
    # Create a new database session
    with Session(engine) as session:
        # Add the new line to the session
        session.add(current)
        # Update the timestamp of the line to the current time
        current.the_timestamp = int(time.time())
        # Commit the changes to the database
        session.commit()
        # Refresh the line object to reflect any database-side changes (like autogenerated IDs)
        session.refresh(current)
        return current


# run command: uvicorn server:app --host localhost --port 3484 --reload
